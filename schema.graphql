scalar Time

# Contains all the data type
type Address {
  address1: String!
  address2: String
  barangay: String!
  city: String!
  province: String!
  country: String!
  zipcode: Int!
}

type Adjustment{
  id: ID!
  productId: ID!
  quantity: Int!
  dateAdded: Time!
  #TODO: Add UserId once the table is ready already
}

type ContactInformation {
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
}

type Dependent {
  personalInformation: PersonalInformation!
  relation: String!
}

type Employee{
  id: ID!
  idNumber: Int!
  personalInformation: PersonalInformation!
  contactInformation: ContactInformation!
  address: Address!
  statutoryInformation: StatutoryInformation!
  dependents: [Dependent!]
  active: Boolean!
  dateHired: Time!
  dateAdded: Time!
  dateResigned: Time  
  position: String!
  salary: Float!
  storeId: Int!
  # Regular, Probation, Contractual
  type: String!
}

type PersonalInformation {
  firstName: String!
  lastName: String!
  middleName: String
  extensionName: String
  birthMonth: Int!
  birthDate: Int!
  birthYear: Int!
  birthPlace: String!
}

type Product {
  id: ID!
  code: String!
  name: String!
  description: String
  sku: String!
  barcode: String!
  price: Float!
  dateAdded: Time!
  dateCancelled: Time
  active: Boolean!
}

type ProductInventory{
  id: ID!
  productId: ID!
  storeId: ID!
  quantity: Int!
}

type Production {
  id: ID!
  productId: ID!
  #TODO: Add UserId once the table is ready already
  #userId: ID!
  batchCode: String!
  dateAdded: Time!
  quantity: Int!
}

type ProductList {
  product: Product!
  inventory: ProductInventory!
}

# Contains the history of the chnages to the inventory
type ProductInventoryHistory {
  id: ID!
  adjustmentId: ID # Not required. Changes can come from production
  productId: ID!
  produdctionId: ID # Not required. Changes can come from adjustment
  storeId: ID!
  #TODO: Add UserId once the table is ready already
  #userId: ID!
  batchCode: String! # Empty for Adjustment
  dateTransaction: Time!
  quantity: Int!
  type: String! #New Product, Production, Adjustment
}

type StatutoryInformation {
  sssNumber: String
  philhealthNumber: String
  hdmfNumber: String
  tinNumber: String
}

type Store {
  id: ID!
  # Main branch / Outlet/ Pop-up
  type: String!
  name: String!
  address: Address!
  active: Boolean!
  dateAdded: Time!
  # TODO: Add UserID once User table is ready already
}

type User {
  id: ID!
  employeeId: ID!
  access: String!
}

# Contains all the INPUT type

input NewAddress {
  address1: String!
  address2: String
  barangay: String!
  city: String!
  province: String!
  country: String!
  zipcode: Int!
}

input NewAdjustment {
  productId: ID!
  quantity: Int!
  dateAdded: Time!
  #TODO: Add UserId once the table is ready already
}

input NewContactInformation {
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
}

input NewDependent {
  personalInformation: NewPersonalInformation!
  relation: String!
}

input NewEmployee {
  personalInformation: NewPersonalInformation!
  address: NewAddress!
  contactInformation: NewContactInformation!
  active: Boolean!
  dateHired: Time!
  statutoryInformation: NewStatutoryInformation!
  position: String!
  salary: Float!
  dependents: [NewDependent!]
  storeId: Int!
  # Regular, Probation, Contractual
  type: String!
}

input NewPersonalInformation {
  firstName: String!
  lastName: String!
  middleName: String
  extensionName: String
  birthMonth: Int!
  birthDate: Int!
  birthYear: Int!
  birthPlace: String!
}

input NewProduct {
  code: String!
  name: String!
  description: String
  sku: String!
  barcode: String!
  price: Float!
  quantity: Int!
  active: Boolean!
}

input NewProductInventory{
  productId: ID!
  storeId: ID!
  quantity: Int!
}

input NewProduction {
  productId: ID!
  #TODO: Add UserId once the table is ready already
  #userId: ID!
  batchCode: String!
  quantity: Int!
}

# Contains the history of the chnages to the inventory
input NewProductInventoryHistory {
  adjustmentId: ID # Not required. Changes can come from production
  productId: ID!
  produdctionId: ID # Not required. Changes can come from adjustment
  storeId: ID!
  #TODO: Add UserId once the table is ready already
  #userId: ID!
  batchCode: String! # Empty for Adjustment
  dateTransaction: Time!
  quantity: Int!
  type: String! #New Product, Production, Adjustment
}

input NewStatutoryInformation {
  sssNumber: String
  philHealthNumber: String
  hdmfNumber: String
  tinNumber: String
}

input NewStore {
  type: String!
  name: String!
  address: NewAddress!
  active: Boolean!
  # TODO: Add UserID once User table is ready already
}

input NewUser {
  employeeId: ID!
  access: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Contains all the EDGES

# An edge in the connection
type EmployeeEdge {
  # item at the end of the edge
  node: Employee
  # A cursor used for pagination
  cursor: String
}


type ProductEdge {
  node: ProductList
  cursor: String
}

type StoreEdge {
  node: Store
  cursor: String
}


# Contains all the CONNECTIONS

# A connection to a list of employees
type EmployeeConnection {
  # Information to aid in Pagination
  pageInfo: PageInfo
  # A list of edges
  edges: [EmployeeEdge]
}

type ProductConnection {
  pageInfo: PageInfo
  edges: [ProductEdge]
}

type StoreConnection {
  pageInfo: PageInfo
  edges: [StoreEdge]
}

# Contains all the FILTERS

input EmployeeFilter {
  id: ID
}

input ProductFilter {
  id: ID
}

input StoreFilter {
  id: ID
}

# Special section

type Viewer {
  allProducts(filter: ProductFilter, last: Int): ProductConnection!
  allStores(filter: StoreFilter, last: Int): StoreConnection!
  allEmployees(filter: EmployeeFilter, last: Int): EmployeeConnection!
  id: ID!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Query {
  #products: [Product!]!
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Mutation {
  addNewProduct(product: NewProduct!) : Product!
  addNewStore(store: NewStore!) : Store!
  addNewEmployee(employee: NewEmployee!): Employee!
  addNewUser(user: NewUser!) : User!
  addNewProductAdjustment(adjustment: NewAdjustment!) : Adjustment!
  addNewProductInventory(inventory: NewProductInventory!): ProductInventory!
  addNewProductInventoryHistory(inventoryHistory: NewProductInventoryHistory!) : ProductInventoryHistory!
  addNewProduction(production: NewProduction!) : Production!
}
