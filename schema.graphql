scalar Time

type Address {
  address1: String!
  address2: String
  barangay: String!
  city: String!
  province: String!
  country: String!
  zipcode: Int!
}

input NewAddress {
  address1: String!
  address2: String
  barangay: String!
  city: String!
  province: String!
  country: String!
  zipcode: Int!
}


type Product {
  id: ID!
  code: String!
  name: String!
  description: String
  sku: String!
  barcode: String!
  price: Float!
  dateAdded: Time!
  dateCancelled: Time
  active: Boolean!
}

input NewProduct {
  code: String!
  name: String!
  description: String
  sku: String!
  barcode: String!
  price: Float!
}

type Store {
  id: ID!
  # Main branch / Outlet/ Pop-up
  type: String!
  name: String!
  address: Address!
  active: Boolean!
  dateAdded: Time!
  # TODO: Add UserID once User table is ready already
}

input NewStore {
  type: String!
  name: String!
  address: NewAddress!
  active: Boolean!
  # TODO: Add UserID once User table is ready already
}

type Employee{
  id: ID!
  personalInformation: PersonalInformation!
  address: Address!
  statutoryInformation: StatutoryInformation!
  dependents: [Dependent!]
  active: Boolean!
  dateHired: Time!
  dateAdded: Time!
  dateResigned: Time  
  position: String!
  salary: Float!
  store: Store!
}

type PersonalInformation {
  firstName: String!
  lastName: String!
  middleName: String
  extensionName: String
  birthMonth: Int
  birthdate: Int
  birthYear: Int
}

type StatutoryInformation {
  sssNumber: String
  philhealthNumber: String
  hdmfNumber: String
  tinNumber: String
}

type Dependent {
  personalInformation: PersonalInformation!
  relation: String!
}

input NewEmployee {
  personalInformation: NewPersonalInformation!
  address: NewAddress!
  active: Boolean!
  dateHired: Time!
  statutoryInformation: NewStatutoryInformation!
  position: String!
  salary: Float!
  dependents: [NewDependent!]
  store: NewStore!
}

input NewDependent {
  personalInformation: NewPersonalInformation!
  relation: String!
}

input NewPersonalInformation {
  firstName: String!
  lastName: String!
  middleName: String
  extensionName: String
  birthMonth: Int
  birthdate: Int
  birthYear: Int
}

input NewStatutoryInformation {
  sssNumber: String
  philhealthNumber: String
  hdmfNumber: String
  tinNumber: String
}


# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in the connection
type ProductEdge {
  # item at the end of the edge
  node: Product
  # A cursor used for pagination
  cursor: String
}

type StoreEdge {
  node: Store
  cursor: String
}

type EmployeeEdge {
  node: Employee
  cursor: String
}

# A collection to a list of products
type ProductConnection {
  # Information to aid in Pagination
  pageInfo: PageInfo
  # A list of edges
  edges: [ProductEdge]
}

type StoreConnection {
  pageInfo: PageInfo
  edges: [StoreEdge]
}

type EmployeeConnection {
  pageInfo: PageInfo
  edges: [EmployeeEdge]
}

input ProductFilter {
  id: ID
}

input StoreFilter {
  id: ID
}

input EmployeeFilter {
  id: ID
}

type Viewer {
  allProducts(filter: ProductFilter, last: Int): ProductConnection!
  allStores(filter: StoreFilter, last: Int): StoreConnection!
  allEmployees(filter: EmployeeFilter, last: Int): EmployeeConnection!
}

type Query {
  #products: [Product!]!
  viewer: Viewer!
}

type Mutation {
  addNewProduct(product: NewProduct!) : Product!
  addNewStore(store: NewStore!) : Store!
  addNewEmployee(employee: NewEmployee!): Employee!
}
